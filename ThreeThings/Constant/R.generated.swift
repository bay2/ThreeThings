//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import IBAnimatable
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.simcai.ThreeThings.beta") ?? Bundle.main
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 color palettes.
  struct color {
    /// This `R.color.home` struct is generated, and contains static references to 1 colors.
    struct home {
      /// <span style='background-color: #53C68F; color: #AC3970; padding: 1px 3px;'>#53C68F</span> Silver Tree
      static let silverTree = Rswift.ColorResource(name: "Silver Tree", red: 0.325490206480026, green: 0.776470601558685, blue: 0.560784339904785, alpha: 1.0)
      
      /// <span style='background-color: #53C68F; color: #AC3970; padding: 1px 3px;'>#53C68F</span> Silver Tree
      /// 
      /// UIColor(red: 0.325490206480026, green: 0.776470601558685, blue: 0.560784339904785, alpha: 1.0)
      static func silverTree(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.325490206480026, green: 0.776470601558685, blue: 0.560784339904785, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `HYc1gj.ttf`.
    static let hYc1gjTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "HYc1gj", pathExtension: "ttf")
    /// Resource file `Home.clr`.
    static let homeClr = Rswift.FileResource(bundle: R.hostingBundle, name: "Home", pathExtension: "clr")
    /// Resource file `NilData.realm`.
    static let nilDataRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "NilData", pathExtension: "realm")
    /// Resource file `OneData.realm`.
    static let oneDataRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "OneData", pathExtension: "realm")
    /// Resource file `Template.html`.
    static let templateHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "Template", pathExtension: "html")
    /// Resource file `UnfinishedData.realm`.
    static let unfinishedDataRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "UnfinishedData", pathExtension: "realm")
    
    /// `bundle.url(forResource: "HYc1gj", withExtension: "ttf")`
    static func hYc1gjTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hYc1gjTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Home", withExtension: "clr")`
    static func homeClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.homeClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "NilData", withExtension: "realm")`
    static func nilDataRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nilDataRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "OneData", withExtension: "realm")`
    static func oneDataRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oneDataRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Template", withExtension: "html")`
    static func templateHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.templateHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnfinishedData", withExtension: "realm")`
    static func unfinishedDataRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unfinishedDataRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `HYc1gj`.
    static let hYc1gj = Rswift.FontResource(fontName: "HYc1gj")
    
    /// `UIFont(name: "HYc1gj", size: ...)`
    static func hYc1gj(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: hYc1gj, size: size)
    }
    
    static func validate() throws {
      if R.font.hYc1gj(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HYc1gj' could not be loaded, is 'HYc1gj.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Back-1`.
    static let back1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back-1")
    /// Image `Close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `Launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch")
    /// Image `NoFile`.
    static let noFile = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoFile")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `save`.
    static let save = Rswift.ImageResource(bundle: R.hostingBundle, name: "save")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `wechat_session`.
    static let wechat_session = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat_session")
    /// Image `wechat_timeline`.
    static let wechat_timeline = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat_timeline")
    
    /// `UIImage(named: "Back-1", bundle: ..., traitCollection: ...)`
    static func back1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NoFile", bundle: ..., traitCollection: ...)`
    static func noFile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noFile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "save", bundle: ..., traitCollection: ...)`
    static func save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat_session", bundle: ..., traitCollection: ...)`
    static func wechat_session(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat_session, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wechat_timeline", bundle: ..., traitCollection: ...)`
    static func wechat_timeline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat_timeline, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeThingTableViewCell`.
    static let homeThingTableViewCell: Rswift.ReuseIdentifier<HomeThingTableViewCell> = Rswift.ReuseIdentifier(identifier: "HomeThingTableViewCell")
    /// Reuse identifier `LicenseTableViewCell`.
    static let licenseTableViewCell: Rswift.ReuseIdentifier<LicenseTableViewCell> = Rswift.ReuseIdentifier(identifier: "LicenseTableViewCell")
    /// Reuse identifier `MenuTableViewCell`.
    static let menuTableViewCell: Rswift.ReuseIdentifier<MenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuTableViewCell")
    /// Reuse identifier `SettingSwitchTableViewCell`.
    static let settingSwitchTableViewCell: Rswift.ReuseIdentifier<SettingSwitchTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingSwitchTableViewCell")
    /// Reuse identifier `SettingTitleTableViewCell`.
    static let settingTitleTableViewCell: Rswift.ReuseIdentifier<SettingTitleTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingTitleTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `Input`.
    static let input = _R.storyboard.input()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `License`.
    static let license = _R.storyboard.license()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `Share`.
    static let share = _R.storyboard.share()
    /// Storyboard `iCloud`.
    static let iCloud = _R.storyboard.iCloud()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "Input", bundle: ...)`
    static func input(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.input)
    }
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "License", bundle: ...)`
    static func license(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.license)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "Share", bundle: ...)`
    static func share(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.share)
    }
    
    /// `UIStoryboard(name: "iCloud", bundle: ...)`
    static func iCloud(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.iCloud)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try launch.validate()
      try share.validate()
      try setting.validate()
      try license.validate()
      try home.validate()
      try input.validate()
      try iCloud.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let homeNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "HomeNavigationController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "Home"
      
      func homeNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu' is used in storyboard 'Home', but couldn't be loaded.") }
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
        if _R.storyboard.home().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Home' as 'MenuViewController'.") }
        if _R.storyboard.home().homeNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationController' could not be loaded from storyboard 'Home' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct iCloud: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let downloadiCloudDataViewController = StoryboardViewControllerResource<DownloadiCloudDataViewController>(identifier: "DownloadiCloudDataViewController")
      let name = "iCloud"
      
      func downloadiCloudDataViewController(_: Void = ()) -> DownloadiCloudDataViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: downloadiCloudDataViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "NoFile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NoFile' is used in storyboard 'iCloud', but couldn't be loaded.") }
        if _R.storyboard.iCloud().downloadiCloudDataViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'downloadiCloudDataViewController' could not be loaded from storyboard 'iCloud' as 'DownloadiCloudDataViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct input: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let inputViewController = StoryboardViewControllerResource<InputViewController>(identifier: "InputViewController")
      let name = "Input"
      
      func inputViewController(_: Void = ()) -> InputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inputViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.input().inputViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inputViewController' could not be loaded from storyboard 'Input' as 'InputViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IBAnimatable.AnimatableNavigationController
      
      let bundle = R.hostingBundle
      let launchViewController = StoryboardViewControllerResource<LaunchViewController>(identifier: "LaunchViewController")
      let name = "Launch"
      
      func launchViewController(_: Void = ()) -> LaunchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'Launch', but couldn't be loaded.") }
        if _R.storyboard.launch().launchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchViewController' could not be loaded from storyboard 'Launch' as 'LaunchViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct license: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let licenseNavgationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "LicenseNavgationController")
      let licenseViewController = StoryboardViewControllerResource<LicenseViewController>(identifier: "LicenseViewController")
      let licenseWebViewController = StoryboardViewControllerResource<LicenseWebViewController>(identifier: "LicenseWebViewController")
      let name = "License"
      
      func licenseNavgationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licenseNavgationController)
      }
      
      func licenseViewController(_: Void = ()) -> LicenseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licenseViewController)
      }
      
      func licenseWebViewController(_: Void = ()) -> LicenseWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licenseWebViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back-1' is used in storyboard 'License', but couldn't be loaded.") }
        if _R.storyboard.license().licenseNavgationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licenseNavgationController' could not be loaded from storyboard 'License' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.license().licenseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licenseViewController' could not be loaded from storyboard 'License' as 'LicenseViewController'.") }
        if _R.storyboard.license().licenseWebViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licenseWebViewController' could not be loaded from storyboard 'License' as 'LicenseWebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Setting"
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back-1' is used in storyboard 'Setting', but couldn't be loaded.") }
        if _R.storyboard.setting().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct share: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ShareViewController
      
      let bundle = R.hostingBundle
      let name = "Share"
      let shareModelViewController = StoryboardViewControllerResource<ShareModelViewController>(identifier: "ShareModelViewController")
      let shareViewController = StoryboardViewControllerResource<ShareViewController>(identifier: "ShareViewController")
      
      func shareModelViewController(_: Void = ()) -> ShareModelViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareModelViewController)
      }
      
      func shareViewController(_: Void = ()) -> ShareViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Share', but couldn't be loaded.") }
        if UIKit.UIImage(named: "save") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'save' is used in storyboard 'Share', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Share', but couldn't be loaded.") }
        if _R.storyboard.share().shareModelViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareModelViewController' could not be loaded from storyboard 'Share' as 'ShareModelViewController'.") }
        if _R.storyboard.share().shareViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareViewController' could not be loaded from storyboard 'Share' as 'ShareViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}